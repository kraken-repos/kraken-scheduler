/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kraken.dev/kraken-scheduler/pkg/apis/scheduler/v1alpha1"
)

// IntegrationScenarioLister helps list IntegrationScenarios.
type IntegrationScenarioLister interface {
	// List lists all IntegrationScenarios in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationScenario, err error)
	// IntegrationScenarios returns an object that can list and get IntegrationScenarios.
	IntegrationScenarios(namespace string) IntegrationScenarioNamespaceLister
	IntegrationScenarioListerExpansion
}

// integrationScenarioLister implements the IntegrationScenarioLister interface.
type integrationScenarioLister struct {
	indexer cache.Indexer
}

// NewIntegrationScenarioLister returns a new IntegrationScenarioLister.
func NewIntegrationScenarioLister(indexer cache.Indexer) IntegrationScenarioLister {
	return &integrationScenarioLister{indexer: indexer}
}

// List lists all IntegrationScenarios in the indexer.
func (s *integrationScenarioLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationScenario, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationScenario))
	})
	return ret, err
}

// IntegrationScenarios returns an object that can list and get IntegrationScenarios.
func (s *integrationScenarioLister) IntegrationScenarios(namespace string) IntegrationScenarioNamespaceLister {
	return integrationScenarioNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationScenarioNamespaceLister helps list and get IntegrationScenarios.
type IntegrationScenarioNamespaceLister interface {
	// List lists all IntegrationScenarios in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationScenario, err error)
	// Get retrieves the IntegrationScenario from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IntegrationScenario, error)
	IntegrationScenarioNamespaceListerExpansion
}

// integrationScenarioNamespaceLister implements the IntegrationScenarioNamespaceLister
// interface.
type integrationScenarioNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationScenarios in the indexer for a given namespace.
func (s integrationScenarioNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationScenario, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationScenario))
	})
	return ret, err
}

// Get retrieves the IntegrationScenario from the indexer for a given namespace and name.
func (s integrationScenarioNamespaceLister) Get(name string) (*v1alpha1.IntegrationScenario, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationscenario"), name)
	}
	return obj.(*v1alpha1.IntegrationScenario), nil
}
